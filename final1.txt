from pandas import *
from numpy import *
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.datasets import load_iris
from seaborn import *

data=load_iris()
data

data=DataFrame(data=data.data,columns=data.feature_names)
data

data=read_csv("iris.csv")
data.head()

data["sepal.length"].mean()

x=data[["sepal.length","sepal.width","petal.length","petal.width"]]


x.mean()
x.median()
x.mode()

data["sepal.length"].mode()
x.min()
x.max()
x.std()

scatterplot(data=data,x="sepal.length",y="sepal.width",hue="variety")

data["sepal.area"]=data["sepal.length"]*data["sepal.width"]
data

data["petal.width"].max()

mn=data.groupby('variety')['sepal.length'].mean()
mn

y=data["variety"]
x
y

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

model=LinearRegression()

from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
data['variety']=encoder.fit_transform(data['variety'])

x=data.drop("variety",axis=1)
y=data['variety']
x
y

model=LinearRegression()

iris=read_csv("iris.csv")
iris.head()

data[["sepal.length","sepal.width"]]
data[data["petal.width"]>1.5]
data["petal.length"].sum()
data

set=data[data["variety"]=="Setosa"]
set

set["petal.length"].max()

data.groupby("variety")["sepal.length"].max()

from sklearn.linear_model import LogisticRegression
data.head()

x=data[["sepal.length","sepal.width","petal.length","petal.width","sepal.area"]]

y=data["variety"]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
model=LogisticRegression()
model.fit(x_train,y_train)
model.predict(x_test)

from sklearn.neighbors import KNeighborsClassifier
kn=KNeighborsClassifier(n_neighbors=3)
kn_fit=kn.fit(x_train,y_train)
kn_fit
kn_pred=kn.predict(x_test)
kn_pred

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier()
dt.fit(x_train,y_train)
dt_pred=dt.predict(x_test)
dt_pred

from sklearn.svm import SVC
svm=SVC(kernel="poly")
svm.fit(x_train,y_train)
svm_pred=svm.predict(x_test)
svm_pred

from sklearn.metrics import accuracy_score,confusion_matrix,precision_score
svm_acc=accuracy_score(y_test,svm_pred)
svm_acc
svm_con=confusion_matrix(y_test,svm_pred)
svm_con
dt_acc=accuracy_score(y_test,dt_pred)
dt_acc
dt_con=confusion_matrix(y_test,dt_pred)
dt_con
kn_acc=accuracy_score(y_test,kn_pred)
kn_acc
kn_con=confusion_matrix(y_test,kn_pred)
kn_con

labels=["svm","knn","desitiontree"]
graph=[svm_acc,kn_acc,dt_acc]
plt.bar(labels,graph)
data=read_csv("titanic.csv")
data

data["Age"].mean()

sub=data[data["Survived"]==1]
sub.shape[0]

dr=data.dropna(subset=["Age"])
dr.shape[0]

data.groupby('Pclass')['Age'].mean()

data['Sex']=data['Sex'].map({'female':0,'male':1})

data["Age"].fillna(10)

x=data[["Pclass","Sex","Age","SibSp","Parch","Fare","Embarked"]]
y=data["Survived"]
x
y

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
model=LogisticRegression()

from sklearn.preprocessing import LabelEncoder
enc=LabelEncoder()
enc.fit(data["Embarked"])
data["Embarked"]=enc.fit_transform(data["Embarked"])
data.head()

data.fillna(10)

x=data[["Pclass","Sex","Age","SibSp","Parch","Fare","Embarked"]]
y=data["Survived"]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
from sklearn.linear_model import LogisticRegression
model=LogisticRegression()

non_nan_rows = x_train.dropna().index
x_train_clean = x_train.loc[non_nan_rows]
y_train_clean = y_train.loc[non_nan_rows]

model = LogisticRegression()

model.fit(x_train_clean,y_train_clean)

non_nan_rows = x_test.dropna().index
x_test_clean = x_test.loc[non_nan_rows]

log_pred=model.predict(x_test_clean)
log_pred
knn=KNeighborsClassifier(n_neighbors=3)

knn.fit(x_train_clean,y_train_clean)
knn.predict(x_test_clean)
